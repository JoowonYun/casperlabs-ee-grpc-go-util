// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: io/casperlabs/casper/consensus/consensus.proto

package consensus

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	state "github.com/hdac-io/casperlabs-ee-grpc-go-util/protobuf/io/casperlabs/casper/consensus/state"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Block_MessageType int32

const (
	// Regular block (with deploys, multiple parents etc).
	Block_BLOCK Block_MessageType = 0
	// A message that doesn't have any deploys,
	// targets one block (no secondary parents),
	// and cannot be used as a parent (is a leaf in the DAG).
	Block_BALLOT Block_MessageType = 1
)

var Block_MessageType_name = map[int32]string{
	0: "BLOCK",
	1: "BALLOT",
}

var Block_MessageType_value = map[string]int32{
	"BLOCK":  0,
	"BALLOT": 1,
}

func (x Block_MessageType) String() string {
	return proto.EnumName(Block_MessageType_name, int32(x))
}

func (Block_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 0}
}

// Highway specific role of a message.
type Block_MessageRole int32

const (
	Block_UNDEFINED Block_MessageRole = 0
	// Message from the round leader; a.k.a. lambda-message. Can be a block or ballot (during the voting period).
	Block_PROPOSAL Block_MessageRole = 1
	// Message in response to leader messages, with no other justification except the validator's own last message; a.k.a. lambda-response.
	Block_CONFIRMATION Block_MessageRole = 2
	// Message created during the round to form summits, a.k.a. omega-message.
	Block_WITNESS Block_MessageRole = 3
)

var Block_MessageRole_name = map[int32]string{
	0: "UNDEFINED",
	1: "PROPOSAL",
	2: "CONFIRMATION",
	3: "WITNESS",
}

var Block_MessageRole_value = map[string]int32{
	"UNDEFINED":    0,
	"PROPOSAL":     1,
	"CONFIRMATION": 2,
	"WITNESS":      3,
}

func (x Block_MessageRole) String() string {
	return proto.EnumName(Block_MessageRole_name, int32(x))
}

func (Block_MessageRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 1}
}

// Signature over for example a deploy or a block. The location of the public key depends
// on the subject; for example if it's a block then the key is actually part of the data
// that needs to be signed over.
type Signature struct {
	// One of the supported algorithms: ed25519, secp256k1, secp256r1
	SigAlgorithm         string   `protobuf:"bytes,1,opt,name=sig_algorithm,json=sigAlgorithm,proto3" json:"sig_algorithm,omitempty"`
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSigAlgorithm() string {
	if m != nil {
		return m.SigAlgorithm
	}
	return ""
}

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

// A signature together with the corresponding public key that can be used to validate it
// for situations where the key is not part of the data being signed, which is usually the
// case where multiple signatures are required.
type Approval struct {
	ApproverPublicKey    []byte     `protobuf:"bytes,1,opt,name=approver_public_key,json=approverPublicKey,proto3" json:"approver_public_key,omitempty"`
	Signature            *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Approval) Reset()         { *m = Approval{} }
func (m *Approval) String() string { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()    {}
func (*Approval) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{1}
}
func (m *Approval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Approval.Unmarshal(m, b)
}
func (m *Approval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Approval.Marshal(b, m, deterministic)
}
func (m *Approval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approval.Merge(m, src)
}
func (m *Approval) XXX_Size() int {
	return xxx_messageInfo_Approval.Size(m)
}
func (m *Approval) XXX_DiscardUnknown() {
	xxx_messageInfo_Approval.DiscardUnknown(m)
}

var xxx_messageInfo_Approval proto.InternalMessageInfo

func (m *Approval) GetApproverPublicKey() []byte {
	if m != nil {
		return m.ApproverPublicKey
	}
	return nil
}

func (m *Approval) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// A smart contract invocation, singed by the account that sent it.
type Deploy struct {
	// blake2b256 hash of the `header`.
	DeployHash []byte         `protobuf:"bytes,1,opt,name=deploy_hash,json=deployHash,proto3" json:"deploy_hash,omitempty"`
	Header     *Deploy_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Body       *Deploy_Body   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Signatures over `deploy_hash` with either the `account_public_key`, or some other keys in case of
	// multi-sig wallets and account recovery (when the private key corresponding to `account_public_key`
	// is lost.)
	Approvals            []*Approval `protobuf:"bytes,4,rep,name=approvals,proto3" json:"approvals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Deploy) Reset()         { *m = Deploy{} }
func (m *Deploy) String() string { return proto.CompactTextString(m) }
func (*Deploy) ProtoMessage()    {}
func (*Deploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2}
}
func (m *Deploy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy.Unmarshal(m, b)
}
func (m *Deploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy.Marshal(b, m, deterministic)
}
func (m *Deploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy.Merge(m, src)
}
func (m *Deploy) XXX_Size() int {
	return xxx_messageInfo_Deploy.Size(m)
}
func (m *Deploy) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy proto.InternalMessageInfo

func (m *Deploy) GetDeployHash() []byte {
	if m != nil {
		return m.DeployHash
	}
	return nil
}

func (m *Deploy) GetHeader() *Deploy_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Deploy) GetBody() *Deploy_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Deploy) GetApprovals() []*Approval {
	if m != nil {
		return m.Approvals
	}
	return nil
}

type Deploy_Header struct {
	// Identifying the Account is the key used to sign the Deploy.
	AccountPublicKeyHash []byte `protobuf:"bytes,1,opt,name=account_public_key_hash,json=accountPublicKeyHash,proto3" json:"account_public_key_hash,omitempty"`
	// Current time milliseconds.
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Conversion rate between the cost of Wasm opcodes and the motes sent by the `payment_code`.
	GasPrice uint64 `protobuf:"varint,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Hash of the body structure as a whole.
	BodyHash []byte `protobuf:"bytes,5,opt,name=body_hash,json=bodyHash,proto3" json:"body_hash,omitempty"`
	// Time to live of the deploy, in milliseconds. A deploy can only be
	// included in a block between Header.timestamp and
	// Header.timestamp + Header.ttl_millis. A value of 0 is interpreted as
	// 'not present' and a default value will be assigned instead.
	TtlMillis uint32 `protobuf:"varint,6,opt,name=ttl_millis,json=ttlMillis,proto3" json:"ttl_millis,omitempty"`
	// List of `Deploy.deploy_hash`s  that must be executed in past blocks
	// before this deploy can be executed.
	Dependencies [][]byte `protobuf:"bytes,7,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// If present, the deploy can only be included in a block on the right chain.
	// This can be used to preotect against accidental or malicious cross chain
	// deploys, in case the same account exists on multiple networks.
	ChainName            string   `protobuf:"bytes,8,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Header) Reset()         { *m = Deploy_Header{} }
func (m *Deploy_Header) String() string { return proto.CompactTextString(m) }
func (*Deploy_Header) ProtoMessage()    {}
func (*Deploy_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 0}
}
func (m *Deploy_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Header.Unmarshal(m, b)
}
func (m *Deploy_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Header.Marshal(b, m, deterministic)
}
func (m *Deploy_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Header.Merge(m, src)
}
func (m *Deploy_Header) XXX_Size() int {
	return xxx_messageInfo_Deploy_Header.Size(m)
}
func (m *Deploy_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Header proto.InternalMessageInfo

func (m *Deploy_Header) GetAccountPublicKeyHash() []byte {
	if m != nil {
		return m.AccountPublicKeyHash
	}
	return nil
}

func (m *Deploy_Header) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Deploy_Header) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *Deploy_Header) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *Deploy_Header) GetTtlMillis() uint32 {
	if m != nil {
		return m.TtlMillis
	}
	return 0
}

func (m *Deploy_Header) GetDependencies() [][]byte {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Deploy_Header) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type Deploy_Body struct {
	// Wasm code of the smart contract to be executed.
	Session *Deploy_Code `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Wasm code that transfers some motes to the validators as payment in exchange to run the Deploy.
	// Note: the word "mote" means "a tiny piece of a substance". Here we are referring to the smallest,
	// indivisible unit of the CL token. This is the equivalent of a Satoshi on Bitcoin or a Wei on Ethereum.
	Payment              *Deploy_Code `protobuf:"bytes,2,opt,name=payment,proto3" json:"payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Deploy_Body) Reset()         { *m = Deploy_Body{} }
func (m *Deploy_Body) String() string { return proto.CompactTextString(m) }
func (*Deploy_Body) ProtoMessage()    {}
func (*Deploy_Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 1}
}
func (m *Deploy_Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Body.Unmarshal(m, b)
}
func (m *Deploy_Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Body.Marshal(b, m, deterministic)
}
func (m *Deploy_Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Body.Merge(m, src)
}
func (m *Deploy_Body) XXX_Size() int {
	return xxx_messageInfo_Deploy_Body.Size(m)
}
func (m *Deploy_Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Body proto.InternalMessageInfo

func (m *Deploy_Body) GetSession() *Deploy_Code {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *Deploy_Body) GetPayment() *Deploy_Code {
	if m != nil {
		return m.Payment
	}
	return nil
}

// Code (either session or payment) to be deployed to the platform.
// Includes both binary instructions (wasm) and optionally, arguments
// to those instructions encoded via our ABI
type Deploy_Code struct {
	// Keyword arguments.
	Args []*Deploy_Arg `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// Types that are valid to be assigned to Contract:
	//	*Deploy_Code_WasmContract_
	//	*Deploy_Code_StoredContract_
	//	*Deploy_Code_StoredVersionedContract_
	//	*Deploy_Code_TransferContract_
	Contract             isDeploy_Code_Contract `protobuf_oneof:"contract"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Deploy_Code) Reset()         { *m = Deploy_Code{} }
func (m *Deploy_Code) String() string { return proto.CompactTextString(m) }
func (*Deploy_Code) ProtoMessage()    {}
func (*Deploy_Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 2}
}
func (m *Deploy_Code) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Code.Unmarshal(m, b)
}
func (m *Deploy_Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Code.Marshal(b, m, deterministic)
}
func (m *Deploy_Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Code.Merge(m, src)
}
func (m *Deploy_Code) XXX_Size() int {
	return xxx_messageInfo_Deploy_Code.Size(m)
}
func (m *Deploy_Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Code proto.InternalMessageInfo

type isDeploy_Code_Contract interface {
	isDeploy_Code_Contract()
}

type Deploy_Code_WasmContract_ struct {
	WasmContract *Deploy_Code_WasmContract `protobuf:"bytes,2,opt,name=wasm_contract,json=wasmContract,proto3,oneof" json:"wasm_contract,omitempty"`
}
type Deploy_Code_StoredContract_ struct {
	StoredContract *Deploy_Code_StoredContract `protobuf:"bytes,3,opt,name=stored_contract,json=storedContract,proto3,oneof" json:"stored_contract,omitempty"`
}
type Deploy_Code_StoredVersionedContract_ struct {
	StoredVersionedContract *Deploy_Code_StoredVersionedContract `protobuf:"bytes,4,opt,name=stored_versioned_contract,json=storedVersionedContract,proto3,oneof" json:"stored_versioned_contract,omitempty"`
}
type Deploy_Code_TransferContract_ struct {
	TransferContract *Deploy_Code_TransferContract `protobuf:"bytes,5,opt,name=transfer_contract,json=transferContract,proto3,oneof" json:"transfer_contract,omitempty"`
}

func (*Deploy_Code_WasmContract_) isDeploy_Code_Contract()            {}
func (*Deploy_Code_StoredContract_) isDeploy_Code_Contract()          {}
func (*Deploy_Code_StoredVersionedContract_) isDeploy_Code_Contract() {}
func (*Deploy_Code_TransferContract_) isDeploy_Code_Contract()        {}

func (m *Deploy_Code) GetContract() isDeploy_Code_Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *Deploy_Code) GetArgs() []*Deploy_Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Deploy_Code) GetWasmContract() *Deploy_Code_WasmContract {
	if x, ok := m.GetContract().(*Deploy_Code_WasmContract_); ok {
		return x.WasmContract
	}
	return nil
}

func (m *Deploy_Code) GetStoredContract() *Deploy_Code_StoredContract {
	if x, ok := m.GetContract().(*Deploy_Code_StoredContract_); ok {
		return x.StoredContract
	}
	return nil
}

func (m *Deploy_Code) GetStoredVersionedContract() *Deploy_Code_StoredVersionedContract {
	if x, ok := m.GetContract().(*Deploy_Code_StoredVersionedContract_); ok {
		return x.StoredVersionedContract
	}
	return nil
}

func (m *Deploy_Code) GetTransferContract() *Deploy_Code_TransferContract {
	if x, ok := m.GetContract().(*Deploy_Code_TransferContract_); ok {
		return x.TransferContract
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Deploy_Code) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Deploy_Code_WasmContract_)(nil),
		(*Deploy_Code_StoredContract_)(nil),
		(*Deploy_Code_StoredVersionedContract_)(nil),
		(*Deploy_Code_TransferContract_)(nil),
	}
}

type Deploy_Code_WasmContract struct {
	Wasm                 []byte   `protobuf:"bytes,1,opt,name=wasm,proto3" json:"wasm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Code_WasmContract) Reset()         { *m = Deploy_Code_WasmContract{} }
func (m *Deploy_Code_WasmContract) String() string { return proto.CompactTextString(m) }
func (*Deploy_Code_WasmContract) ProtoMessage()    {}
func (*Deploy_Code_WasmContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 2, 0}
}
func (m *Deploy_Code_WasmContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Code_WasmContract.Unmarshal(m, b)
}
func (m *Deploy_Code_WasmContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Code_WasmContract.Marshal(b, m, deterministic)
}
func (m *Deploy_Code_WasmContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Code_WasmContract.Merge(m, src)
}
func (m *Deploy_Code_WasmContract) XXX_Size() int {
	return xxx_messageInfo_Deploy_Code_WasmContract.Size(m)
}
func (m *Deploy_Code_WasmContract) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Code_WasmContract.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Code_WasmContract proto.InternalMessageInfo

func (m *Deploy_Code_WasmContract) GetWasm() []byte {
	if m != nil {
		return m.Wasm
	}
	return nil
}

type Deploy_Code_StoredVersionedContract struct {
	// Types that are valid to be assigned to Address:
	//	*Deploy_Code_StoredVersionedContract_PackageHash
	//	*Deploy_Code_StoredVersionedContract_Name
	Address isDeploy_Code_StoredVersionedContract_Address `protobuf_oneof:"address"`
	// Name of the entry method in the contract.
	EntryPoint string `protobuf:"bytes,3,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	// Optionally specify the exact version; 0 means use the highest available.
	Version              uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Code_StoredVersionedContract) Reset()         { *m = Deploy_Code_StoredVersionedContract{} }
func (m *Deploy_Code_StoredVersionedContract) String() string { return proto.CompactTextString(m) }
func (*Deploy_Code_StoredVersionedContract) ProtoMessage()    {}
func (*Deploy_Code_StoredVersionedContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 2, 1}
}
func (m *Deploy_Code_StoredVersionedContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Code_StoredVersionedContract.Unmarshal(m, b)
}
func (m *Deploy_Code_StoredVersionedContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Code_StoredVersionedContract.Marshal(b, m, deterministic)
}
func (m *Deploy_Code_StoredVersionedContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Code_StoredVersionedContract.Merge(m, src)
}
func (m *Deploy_Code_StoredVersionedContract) XXX_Size() int {
	return xxx_messageInfo_Deploy_Code_StoredVersionedContract.Size(m)
}
func (m *Deploy_Code_StoredVersionedContract) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Code_StoredVersionedContract.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Code_StoredVersionedContract proto.InternalMessageInfo

type isDeploy_Code_StoredVersionedContract_Address interface {
	isDeploy_Code_StoredVersionedContract_Address()
}

type Deploy_Code_StoredVersionedContract_PackageHash struct {
	PackageHash []byte `protobuf:"bytes,1,opt,name=package_hash,json=packageHash,proto3,oneof" json:"package_hash,omitempty"`
}
type Deploy_Code_StoredVersionedContract_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (*Deploy_Code_StoredVersionedContract_PackageHash) isDeploy_Code_StoredVersionedContract_Address() {
}
func (*Deploy_Code_StoredVersionedContract_Name) isDeploy_Code_StoredVersionedContract_Address() {}

func (m *Deploy_Code_StoredVersionedContract) GetAddress() isDeploy_Code_StoredVersionedContract_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Deploy_Code_StoredVersionedContract) GetPackageHash() []byte {
	if x, ok := m.GetAddress().(*Deploy_Code_StoredVersionedContract_PackageHash); ok {
		return x.PackageHash
	}
	return nil
}

func (m *Deploy_Code_StoredVersionedContract) GetName() string {
	if x, ok := m.GetAddress().(*Deploy_Code_StoredVersionedContract_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Deploy_Code_StoredVersionedContract) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

func (m *Deploy_Code_StoredVersionedContract) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Deploy_Code_StoredVersionedContract) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Deploy_Code_StoredVersionedContract_PackageHash)(nil),
		(*Deploy_Code_StoredVersionedContract_Name)(nil),
	}
}

type Deploy_Code_StoredContract struct {
	// Types that are valid to be assigned to Address:
	//	*Deploy_Code_StoredContract_ContractHash
	//	*Deploy_Code_StoredContract_Name
	Address isDeploy_Code_StoredContract_Address `protobuf_oneof:"address"`
	// Name of the entry method in the contract.
	EntryPoint           string   `protobuf:"bytes,3,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Code_StoredContract) Reset()         { *m = Deploy_Code_StoredContract{} }
func (m *Deploy_Code_StoredContract) String() string { return proto.CompactTextString(m) }
func (*Deploy_Code_StoredContract) ProtoMessage()    {}
func (*Deploy_Code_StoredContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 2, 2}
}
func (m *Deploy_Code_StoredContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Code_StoredContract.Unmarshal(m, b)
}
func (m *Deploy_Code_StoredContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Code_StoredContract.Marshal(b, m, deterministic)
}
func (m *Deploy_Code_StoredContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Code_StoredContract.Merge(m, src)
}
func (m *Deploy_Code_StoredContract) XXX_Size() int {
	return xxx_messageInfo_Deploy_Code_StoredContract.Size(m)
}
func (m *Deploy_Code_StoredContract) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Code_StoredContract.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Code_StoredContract proto.InternalMessageInfo

type isDeploy_Code_StoredContract_Address interface {
	isDeploy_Code_StoredContract_Address()
}

type Deploy_Code_StoredContract_ContractHash struct {
	ContractHash []byte `protobuf:"bytes,1,opt,name=contract_hash,json=contractHash,proto3,oneof" json:"contract_hash,omitempty"`
}
type Deploy_Code_StoredContract_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (*Deploy_Code_StoredContract_ContractHash) isDeploy_Code_StoredContract_Address() {}
func (*Deploy_Code_StoredContract_Name) isDeploy_Code_StoredContract_Address()         {}

func (m *Deploy_Code_StoredContract) GetAddress() isDeploy_Code_StoredContract_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Deploy_Code_StoredContract) GetContractHash() []byte {
	if x, ok := m.GetAddress().(*Deploy_Code_StoredContract_ContractHash); ok {
		return x.ContractHash
	}
	return nil
}

func (m *Deploy_Code_StoredContract) GetName() string {
	if x, ok := m.GetAddress().(*Deploy_Code_StoredContract_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Deploy_Code_StoredContract) GetEntryPoint() string {
	if m != nil {
		return m.EntryPoint
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Deploy_Code_StoredContract) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Deploy_Code_StoredContract_ContractHash)(nil),
		(*Deploy_Code_StoredContract_Name)(nil),
	}
}

// Built-in transfer, bypassing the WASM execution.
type Deploy_Code_TransferContract struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Code_TransferContract) Reset()         { *m = Deploy_Code_TransferContract{} }
func (m *Deploy_Code_TransferContract) String() string { return proto.CompactTextString(m) }
func (*Deploy_Code_TransferContract) ProtoMessage()    {}
func (*Deploy_Code_TransferContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 2, 3}
}
func (m *Deploy_Code_TransferContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Code_TransferContract.Unmarshal(m, b)
}
func (m *Deploy_Code_TransferContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Code_TransferContract.Marshal(b, m, deterministic)
}
func (m *Deploy_Code_TransferContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Code_TransferContract.Merge(m, src)
}
func (m *Deploy_Code_TransferContract) XXX_Size() int {
	return xxx_messageInfo_Deploy_Code_TransferContract.Size(m)
}
func (m *Deploy_Code_TransferContract) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Code_TransferContract.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Code_TransferContract proto.InternalMessageInfo

type Deploy_Arg struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                *state.CLValueInstance `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Deploy_Arg) Reset()         { *m = Deploy_Arg{} }
func (m *Deploy_Arg) String() string { return proto.CompactTextString(m) }
func (*Deploy_Arg) ProtoMessage()    {}
func (*Deploy_Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 3}
}
func (m *Deploy_Arg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Arg.Unmarshal(m, b)
}
func (m *Deploy_Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Arg.Marshal(b, m, deterministic)
}
func (m *Deploy_Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Arg.Merge(m, src)
}
func (m *Deploy_Arg) XXX_Size() int {
	return xxx_messageInfo_Deploy_Arg.Size(m)
}
func (m *Deploy_Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Arg proto.InternalMessageInfo

func (m *Deploy_Arg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deploy_Arg) GetValue() *state.CLValueInstance {
	if m != nil {
		return m.Value
	}
	return nil
}

// Old definition of Arg, still kept around to support old JSON format.
// TODO: delete this when there are no more usages of the old JSON format
type Deploy_LegacyArg struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                *Deploy_LegacyArg_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Deploy_LegacyArg) Reset()         { *m = Deploy_LegacyArg{} }
func (m *Deploy_LegacyArg) String() string { return proto.CompactTextString(m) }
func (*Deploy_LegacyArg) ProtoMessage()    {}
func (*Deploy_LegacyArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 4}
}
func (m *Deploy_LegacyArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_LegacyArg.Unmarshal(m, b)
}
func (m *Deploy_LegacyArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_LegacyArg.Marshal(b, m, deterministic)
}
func (m *Deploy_LegacyArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_LegacyArg.Merge(m, src)
}
func (m *Deploy_LegacyArg) XXX_Size() int {
	return xxx_messageInfo_Deploy_LegacyArg.Size(m)
}
func (m *Deploy_LegacyArg) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_LegacyArg.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_LegacyArg proto.InternalMessageInfo

func (m *Deploy_LegacyArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deploy_LegacyArg) GetValue() *Deploy_LegacyArg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Deploy_LegacyArg_Value struct {
	// Types that are valid to be assigned to Value:
	//	*Deploy_LegacyArg_Value_OptionalValue
	//	*Deploy_LegacyArg_Value_BytesValue
	//	*Deploy_LegacyArg_Value_IntValue
	//	*Deploy_LegacyArg_Value_IntList
	//	*Deploy_LegacyArg_Value_StringValue
	//	*Deploy_LegacyArg_Value_StringList
	//	*Deploy_LegacyArg_Value_LongValue
	//	*Deploy_LegacyArg_Value_BigInt
	//	*Deploy_LegacyArg_Value_Key
	Value                isDeploy_LegacyArg_Value_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Deploy_LegacyArg_Value) Reset()         { *m = Deploy_LegacyArg_Value{} }
func (m *Deploy_LegacyArg_Value) String() string { return proto.CompactTextString(m) }
func (*Deploy_LegacyArg_Value) ProtoMessage()    {}
func (*Deploy_LegacyArg_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{2, 4, 0}
}
func (m *Deploy_LegacyArg_Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_LegacyArg_Value.Unmarshal(m, b)
}
func (m *Deploy_LegacyArg_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_LegacyArg_Value.Marshal(b, m, deterministic)
}
func (m *Deploy_LegacyArg_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_LegacyArg_Value.Merge(m, src)
}
func (m *Deploy_LegacyArg_Value) XXX_Size() int {
	return xxx_messageInfo_Deploy_LegacyArg_Value.Size(m)
}
func (m *Deploy_LegacyArg_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_LegacyArg_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_LegacyArg_Value proto.InternalMessageInfo

type isDeploy_LegacyArg_Value_Value interface {
	isDeploy_LegacyArg_Value_Value()
}

type Deploy_LegacyArg_Value_OptionalValue struct {
	OptionalValue *Deploy_LegacyArg_Value `protobuf:"bytes,1,opt,name=optional_value,json=optionalValue,proto3,oneof" json:"optional_value,omitempty"`
}
type Deploy_LegacyArg_Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
}
type Deploy_LegacyArg_Value_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof" json:"int_value,omitempty"`
}
type Deploy_LegacyArg_Value_IntList struct {
	IntList *state.IntList `protobuf:"bytes,4,opt,name=int_list,json=intList,proto3,oneof" json:"int_list,omitempty"`
}
type Deploy_LegacyArg_Value_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type Deploy_LegacyArg_Value_StringList struct {
	StringList *state.StringList `protobuf:"bytes,6,opt,name=string_list,json=stringList,proto3,oneof" json:"string_list,omitempty"`
}
type Deploy_LegacyArg_Value_LongValue struct {
	LongValue int64 `protobuf:"varint,7,opt,name=long_value,json=longValue,proto3,oneof" json:"long_value,omitempty"`
}
type Deploy_LegacyArg_Value_BigInt struct {
	BigInt *state.BigInt `protobuf:"bytes,8,opt,name=big_int,json=bigInt,proto3,oneof" json:"big_int,omitempty"`
}
type Deploy_LegacyArg_Value_Key struct {
	Key *state.Key `protobuf:"bytes,9,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (*Deploy_LegacyArg_Value_OptionalValue) isDeploy_LegacyArg_Value_Value() {}
func (*Deploy_LegacyArg_Value_BytesValue) isDeploy_LegacyArg_Value_Value()    {}
func (*Deploy_LegacyArg_Value_IntValue) isDeploy_LegacyArg_Value_Value()      {}
func (*Deploy_LegacyArg_Value_IntList) isDeploy_LegacyArg_Value_Value()       {}
func (*Deploy_LegacyArg_Value_StringValue) isDeploy_LegacyArg_Value_Value()   {}
func (*Deploy_LegacyArg_Value_StringList) isDeploy_LegacyArg_Value_Value()    {}
func (*Deploy_LegacyArg_Value_LongValue) isDeploy_LegacyArg_Value_Value()     {}
func (*Deploy_LegacyArg_Value_BigInt) isDeploy_LegacyArg_Value_Value()        {}
func (*Deploy_LegacyArg_Value_Key) isDeploy_LegacyArg_Value_Value()           {}

func (m *Deploy_LegacyArg_Value) GetValue() isDeploy_LegacyArg_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetOptionalValue() *Deploy_LegacyArg_Value {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_OptionalValue); ok {
		return x.OptionalValue
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetIntValue() int32 {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Deploy_LegacyArg_Value) GetIntList() *state.IntList {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_IntList); ok {
		return x.IntList
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetStringValue() string {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Deploy_LegacyArg_Value) GetStringList() *state.StringList {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_StringList); ok {
		return x.StringList
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetLongValue() int64 {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (m *Deploy_LegacyArg_Value) GetBigInt() *state.BigInt {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_BigInt); ok {
		return x.BigInt
	}
	return nil
}

func (m *Deploy_LegacyArg_Value) GetKey() *state.Key {
	if x, ok := m.GetValue().(*Deploy_LegacyArg_Value_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Deploy_LegacyArg_Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Deploy_LegacyArg_Value_OptionalValue)(nil),
		(*Deploy_LegacyArg_Value_BytesValue)(nil),
		(*Deploy_LegacyArg_Value_IntValue)(nil),
		(*Deploy_LegacyArg_Value_IntList)(nil),
		(*Deploy_LegacyArg_Value_StringValue)(nil),
		(*Deploy_LegacyArg_Value_StringList)(nil),
		(*Deploy_LegacyArg_Value_LongValue)(nil),
		(*Deploy_LegacyArg_Value_BigInt)(nil),
		(*Deploy_LegacyArg_Value_Key)(nil),
	}
}

// Limited deploy information for gossiping.
type DeploySummary struct {
	// blake2b256 hash of the `header`.
	DeployHash []byte         `protobuf:"bytes,1,opt,name=deploy_hash,json=deployHash,proto3" json:"deploy_hash,omitempty"`
	Header     *Deploy_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Signatures over `deploy_hash` with either the `account_public_key`, or some other keys in case of
	// multi-sig wallets and account recovery (when the private key corresponding to `account_public_key`
	// is lost.)
	Approvals            []*Approval `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeploySummary) Reset()         { *m = DeploySummary{} }
func (m *DeploySummary) String() string { return proto.CompactTextString(m) }
func (*DeploySummary) ProtoMessage()    {}
func (*DeploySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{3}
}
func (m *DeploySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploySummary.Unmarshal(m, b)
}
func (m *DeploySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploySummary.Marshal(b, m, deterministic)
}
func (m *DeploySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploySummary.Merge(m, src)
}
func (m *DeploySummary) XXX_Size() int {
	return xxx_messageInfo_DeploySummary.Size(m)
}
func (m *DeploySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploySummary.DiscardUnknown(m)
}

var xxx_messageInfo_DeploySummary proto.InternalMessageInfo

func (m *DeploySummary) GetDeployHash() []byte {
	if m != nil {
		return m.DeployHash
	}
	return nil
}

func (m *DeploySummary) GetHeader() *Deploy_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeploySummary) GetApprovals() []*Approval {
	if m != nil {
		return m.Approvals
	}
	return nil
}

// Limited block information for gossiping.
type BlockSummary struct {
	// blake2b256 hash of the `header`.
	BlockHash []byte        `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Header    *Block_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Signature over `block_hash` using `validator_public_key`.
	Signature            *Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BlockSummary) Reset()         { *m = BlockSummary{} }
func (m *BlockSummary) String() string { return proto.CompactTextString(m) }
func (*BlockSummary) ProtoMessage()    {}
func (*BlockSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{4}
}
func (m *BlockSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockSummary.Unmarshal(m, b)
}
func (m *BlockSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockSummary.Marshal(b, m, deterministic)
}
func (m *BlockSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSummary.Merge(m, src)
}
func (m *BlockSummary) XXX_Size() int {
	return xxx_messageInfo_BlockSummary.Size(m)
}
func (m *BlockSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSummary proto.InternalMessageInfo

func (m *BlockSummary) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *BlockSummary) GetHeader() *Block_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockSummary) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Full block information.
type Block struct {
	// blake2b256 hash of the `header`.
	BlockHash []byte        `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Header    *Block_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Body      *Block_Body   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Signature over `block_hash`.
	Signature            *Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *Block) GetHeader() *Block_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBody() *Block_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Block) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Block_Header struct {
	ParentHashes   [][]byte               `protobuf:"bytes,1,rep,name=parent_hashes,json=parentHashes,proto3" json:"parent_hashes,omitempty"`
	Justifications []*Block_Justification `protobuf:"bytes,2,rep,name=justifications,proto3" json:"justifications,omitempty"`
	State          *Block_GlobalState     `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Hash of the body structure as a whole.
	BodyHash []byte `protobuf:"bytes,4,opt,name=body_hash,json=bodyHash,proto3" json:"body_hash,omitempty"`
	// Unix timestamp from when the block was created.
	Timestamp              uint64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProtocolVersion        *state.ProtocolVersion `protobuf:"bytes,13,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	DeployCount            uint32                 `protobuf:"varint,7,opt,name=deploy_count,json=deployCount,proto3" json:"deploy_count,omitempty"`
	ChainName              string                 `protobuf:"bytes,8,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ValidatorBlockSeqNum   uint32                 `protobuf:"varint,9,opt,name=validator_block_seq_num,json=validatorBlockSeqNum,proto3" json:"validator_block_seq_num,omitempty"`
	ValidatorPublicKey     []byte                 `protobuf:"bytes,10,opt,name=validator_public_key,json=validatorPublicKey,proto3" json:"validator_public_key,omitempty"`
	ValidatorPublicKeyHash []byte                 `protobuf:"bytes,20,opt,name=validator_public_key_hash,json=validatorPublicKeyHash,proto3" json:"validator_public_key_hash,omitempty"`
	// The hash of the previous block (or ballot) from this validator.
	// It has to be stated even if it's part of the justifications directly,
	// and it must be part of the j-past-cone of the block, in case transitive
	// justifications are omitted. It must be the one corresponding to
	// validator_block_seq_num - 1.
	ValidatorPrevBlockHash []byte `protobuf:"bytes,14,opt,name=validator_prev_block_hash,json=validatorPrevBlockHash,proto3" json:"validator_prev_block_hash,omitempty"`
	// Distance from Genesis.
	// This is a rank based on the justifications of the message.
	JRank       uint64            `protobuf:"varint,11,opt,name=j_rank,json=jRank,proto3" json:"j_rank,omitempty"`
	MessageType Block_MessageType `protobuf:"varint,12,opt,name=message_type,json=messageType,proto3,enum=io.casperlabs.casper.consensus.Block_MessageType" json:"message_type,omitempty"`
	MessageRole Block_MessageRole `protobuf:"varint,19,opt,name=message_role,json=messageRole,proto3,enum=io.casperlabs.casper.consensus.Block_MessageRole" json:"message_role,omitempty"`
	// A block from where the fork choice is calculated.
	// Corresponds to the era the block belongs to.
	KeyBlockHash []byte `protobuf:"bytes,15,opt,name=key_block_hash,json=keyBlockHash,proto3" json:"key_block_hash,omitempty"`
	// The round ID (the idealistic protocol timestamp) to which the block belongs;
	// this will be slightly different from the timestamp, which is the wall clock time
	// of when the block was _actually_ created.
	RoundId uint64 `protobuf:"varint,16,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	// A random bit set by the creator of the block which is goes towards the leader seed
	// of the era. Only leader blocks (i.e. lambda messages) have to set it; should be
	// empty for ballots.
	MagicBit bool `protobuf:"varint,17,opt,name=magic_bit,json=magicBit,proto3" json:"magic_bit,omitempty"`
	// Block height.
	// Different from `j_rank` because it's incremented along main tree in the DAG, based on the parents.
	MainRank             uint64   `protobuf:"varint,18,opt,name=main_rank,json=mainRank,proto3" json:"main_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block_Header) Reset()         { *m = Block_Header{} }
func (m *Block_Header) String() string { return proto.CompactTextString(m) }
func (*Block_Header) ProtoMessage()    {}
func (*Block_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 0}
}
func (m *Block_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_Header.Unmarshal(m, b)
}
func (m *Block_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_Header.Marshal(b, m, deterministic)
}
func (m *Block_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_Header.Merge(m, src)
}
func (m *Block_Header) XXX_Size() int {
	return xxx_messageInfo_Block_Header.Size(m)
}
func (m *Block_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Block_Header proto.InternalMessageInfo

func (m *Block_Header) GetParentHashes() [][]byte {
	if m != nil {
		return m.ParentHashes
	}
	return nil
}

func (m *Block_Header) GetJustifications() []*Block_Justification {
	if m != nil {
		return m.Justifications
	}
	return nil
}

func (m *Block_Header) GetState() *Block_GlobalState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Block_Header) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *Block_Header) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block_Header) GetProtocolVersion() *state.ProtocolVersion {
	if m != nil {
		return m.ProtocolVersion
	}
	return nil
}

func (m *Block_Header) GetDeployCount() uint32 {
	if m != nil {
		return m.DeployCount
	}
	return 0
}

func (m *Block_Header) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Block_Header) GetValidatorBlockSeqNum() uint32 {
	if m != nil {
		return m.ValidatorBlockSeqNum
	}
	return 0
}

func (m *Block_Header) GetValidatorPublicKey() []byte {
	if m != nil {
		return m.ValidatorPublicKey
	}
	return nil
}

func (m *Block_Header) GetValidatorPublicKeyHash() []byte {
	if m != nil {
		return m.ValidatorPublicKeyHash
	}
	return nil
}

func (m *Block_Header) GetValidatorPrevBlockHash() []byte {
	if m != nil {
		return m.ValidatorPrevBlockHash
	}
	return nil
}

func (m *Block_Header) GetJRank() uint64 {
	if m != nil {
		return m.JRank
	}
	return 0
}

func (m *Block_Header) GetMessageType() Block_MessageType {
	if m != nil {
		return m.MessageType
	}
	return Block_BLOCK
}

func (m *Block_Header) GetMessageRole() Block_MessageRole {
	if m != nil {
		return m.MessageRole
	}
	return Block_UNDEFINED
}

func (m *Block_Header) GetKeyBlockHash() []byte {
	if m != nil {
		return m.KeyBlockHash
	}
	return nil
}

func (m *Block_Header) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *Block_Header) GetMagicBit() bool {
	if m != nil {
		return m.MagicBit
	}
	return false
}

func (m *Block_Header) GetMainRank() uint64 {
	if m != nil {
		return m.MainRank
	}
	return 0
}

type Block_Body struct {
	Deploys              []*Block_ProcessedDeploy `protobuf:"bytes,1,rep,name=deploys,proto3" json:"deploys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Block_Body) Reset()         { *m = Block_Body{} }
func (m *Block_Body) String() string { return proto.CompactTextString(m) }
func (*Block_Body) ProtoMessage()    {}
func (*Block_Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 1}
}
func (m *Block_Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_Body.Unmarshal(m, b)
}
func (m *Block_Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_Body.Marshal(b, m, deterministic)
}
func (m *Block_Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_Body.Merge(m, src)
}
func (m *Block_Body) XXX_Size() int {
	return xxx_messageInfo_Block_Body.Size(m)
}
func (m *Block_Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Block_Body proto.InternalMessageInfo

func (m *Block_Body) GetDeploys() []*Block_ProcessedDeploy {
	if m != nil {
		return m.Deploys
	}
	return nil
}

type Block_Justification struct {
	ValidatorPublicKeyHash []byte   `protobuf:"bytes,1,opt,name=validator_public_key_hash,json=validatorPublicKeyHash,proto3" json:"validator_public_key_hash,omitempty"`
	LatestBlockHash        []byte   `protobuf:"bytes,2,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Block_Justification) Reset()         { *m = Block_Justification{} }
func (m *Block_Justification) String() string { return proto.CompactTextString(m) }
func (*Block_Justification) ProtoMessage()    {}
func (*Block_Justification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 2}
}
func (m *Block_Justification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_Justification.Unmarshal(m, b)
}
func (m *Block_Justification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_Justification.Marshal(b, m, deterministic)
}
func (m *Block_Justification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_Justification.Merge(m, src)
}
func (m *Block_Justification) XXX_Size() int {
	return xxx_messageInfo_Block_Justification.Size(m)
}
func (m *Block_Justification) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_Justification.DiscardUnknown(m)
}

var xxx_messageInfo_Block_Justification proto.InternalMessageInfo

func (m *Block_Justification) GetValidatorPublicKeyHash() []byte {
	if m != nil {
		return m.ValidatorPublicKeyHash
	}
	return nil
}

func (m *Block_Justification) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

type Block_ProcessedDeploy struct {
	Deploy       *Deploy `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Cost         uint64  `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	IsError      bool    `protobuf:"varint,3,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	ErrorMessage string  `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// A group this deploy will be executed in.
	// Deploys with the same `stage` value will be executed in parallel.
	Stage                uint32   `protobuf:"varint,5,opt,name=stage,proto3" json:"stage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block_ProcessedDeploy) Reset()         { *m = Block_ProcessedDeploy{} }
func (m *Block_ProcessedDeploy) String() string { return proto.CompactTextString(m) }
func (*Block_ProcessedDeploy) ProtoMessage()    {}
func (*Block_ProcessedDeploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 3}
}
func (m *Block_ProcessedDeploy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_ProcessedDeploy.Unmarshal(m, b)
}
func (m *Block_ProcessedDeploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_ProcessedDeploy.Marshal(b, m, deterministic)
}
func (m *Block_ProcessedDeploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_ProcessedDeploy.Merge(m, src)
}
func (m *Block_ProcessedDeploy) XXX_Size() int {
	return xxx_messageInfo_Block_ProcessedDeploy.Size(m)
}
func (m *Block_ProcessedDeploy) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_ProcessedDeploy.DiscardUnknown(m)
}

var xxx_messageInfo_Block_ProcessedDeploy proto.InternalMessageInfo

func (m *Block_ProcessedDeploy) GetDeploy() *Deploy {
	if m != nil {
		return m.Deploy
	}
	return nil
}

func (m *Block_ProcessedDeploy) GetCost() uint64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Block_ProcessedDeploy) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *Block_ProcessedDeploy) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Block_ProcessedDeploy) GetStage() uint32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type Block_GlobalState struct {
	// May not correspond to a particular block if there are multiple parents.
	PreStateHash  []byte `protobuf:"bytes,1,opt,name=pre_state_hash,json=preStateHash,proto3" json:"pre_state_hash,omitempty"`
	PostStateHash []byte `protobuf:"bytes,2,opt,name=post_state_hash,json=postStateHash,proto3" json:"post_state_hash,omitempty"`
	// Included in header so lightweight nodes can follow the consensus.
	Bonds                []*Bond  `protobuf:"bytes,3,rep,name=bonds,proto3" json:"bonds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block_GlobalState) Reset()         { *m = Block_GlobalState{} }
func (m *Block_GlobalState) String() string { return proto.CompactTextString(m) }
func (*Block_GlobalState) ProtoMessage()    {}
func (*Block_GlobalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{5, 4}
}
func (m *Block_GlobalState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block_GlobalState.Unmarshal(m, b)
}
func (m *Block_GlobalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block_GlobalState.Marshal(b, m, deterministic)
}
func (m *Block_GlobalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block_GlobalState.Merge(m, src)
}
func (m *Block_GlobalState) XXX_Size() int {
	return xxx_messageInfo_Block_GlobalState.Size(m)
}
func (m *Block_GlobalState) XXX_DiscardUnknown() {
	xxx_messageInfo_Block_GlobalState.DiscardUnknown(m)
}

var xxx_messageInfo_Block_GlobalState proto.InternalMessageInfo

func (m *Block_GlobalState) GetPreStateHash() []byte {
	if m != nil {
		return m.PreStateHash
	}
	return nil
}

func (m *Block_GlobalState) GetPostStateHash() []byte {
	if m != nil {
		return m.PostStateHash
	}
	return nil
}

func (m *Block_GlobalState) GetBonds() []*Bond {
	if m != nil {
		return m.Bonds
	}
	return nil
}

type Bond struct {
	ValidatorPublicKeyHash []byte        `protobuf:"bytes,1,opt,name=validator_public_key_hash,json=validatorPublicKeyHash,proto3" json:"validator_public_key_hash,omitempty"`
	Stake                  *state.BigInt `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *Bond) Reset()         { *m = Bond{} }
func (m *Bond) String() string { return proto.CompactTextString(m) }
func (*Bond) ProtoMessage()    {}
func (*Bond) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{6}
}
func (m *Bond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bond.Unmarshal(m, b)
}
func (m *Bond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bond.Marshal(b, m, deterministic)
}
func (m *Bond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bond.Merge(m, src)
}
func (m *Bond) XXX_Size() int {
	return xxx_messageInfo_Bond.Size(m)
}
func (m *Bond) XXX_DiscardUnknown() {
	xxx_messageInfo_Bond.DiscardUnknown(m)
}

var xxx_messageInfo_Bond proto.InternalMessageInfo

func (m *Bond) GetValidatorPublicKeyHash() []byte {
	if m != nil {
		return m.ValidatorPublicKeyHash
	}
	return nil
}

func (m *Bond) GetStake() *state.BigInt {
	if m != nil {
		return m.Stake
	}
	return nil
}

// To allow nodes in the beginning to verify that they are joining the right network,
// while there is no DAG to look at, they disseminate approvals for the Genesis candidate
// until it gathers enough support for individual nodes to pass their thresholds and
// transition to processing blocks and deploys.
// Nodes should persist this value to be able to retrieve it later even if in case all nodes are restarted.
type GenesisCandidate struct {
	// The hash of the Genesis block, which should reflect the effects of executing
	// the block that was compiled according to the published specification.
	// The Genesis block is special in that it is not signed by any one validator:
	// all the signatures are going to be missing, all the public key fields empty,
	// including those that would sign the deploys in the body.
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Approvals from bonded validators with signatures over the `block_hash`.
	Approvals            []*Approval `protobuf:"bytes,2,rep,name=approvals,proto3" json:"approvals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenesisCandidate) Reset()         { *m = GenesisCandidate{} }
func (m *GenesisCandidate) String() string { return proto.CompactTextString(m) }
func (*GenesisCandidate) ProtoMessage()    {}
func (*GenesisCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{7}
}
func (m *GenesisCandidate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenesisCandidate.Unmarshal(m, b)
}
func (m *GenesisCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenesisCandidate.Marshal(b, m, deterministic)
}
func (m *GenesisCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCandidate.Merge(m, src)
}
func (m *GenesisCandidate) XXX_Size() int {
	return xxx_messageInfo_GenesisCandidate.Size(m)
}
func (m *GenesisCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCandidate proto.InternalMessageInfo

func (m *GenesisCandidate) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *GenesisCandidate) GetApprovals() []*Approval {
	if m != nil {
		return m.Approvals
	}
	return nil
}

type Era struct {
	// Key block of the era, which is basically its identifier.
	KeyBlockHash []byte `protobuf:"bytes,1,opt,name=key_block_hash,json=keyBlockHash,proto3" json:"key_block_hash,omitempty"`
	// Identifier of the parent era.
	ParentKeyBlockHash []byte `protobuf:"bytes,2,opt,name=parent_key_block_hash,json=parentKeyBlockHash,proto3" json:"parent_key_block_hash,omitempty"`
	// Number of ticks since Unix epoch (in the protocol specific units) when the era starts.
	StartTick uint64 `protobuf:"varint,3,opt,name=start_tick,json=startTick,proto3" json:"start_tick,omitempty"`
	// Last round of the era (non-inclusive), after which the first block is the switch block.
	EndTick uint64 `protobuf:"varint,4,opt,name=end_tick,json=endTick,proto3" json:"end_tick,omitempty"`
	// The hash of the booking block which was reachable from the key block;
	// this is where the bonds are coming, included in the era for reference.
	BookingBlockHash []byte `protobuf:"bytes,5,opt,name=booking_block_hash,json=bookingBlockHash,proto3" json:"booking_block_hash,omitempty"`
	// The random seed compiled from the magic bits between the booking block and the key block.
	// 1. Concatenate all the magic bits into an array of bytes, padding on the right with 0s to make it divisble by 8.
	// 2. Concatenate the byte array to the parent leader seed.
	// 3. Let the leader_seed be the blake2b256 hash of the resulting array.
	// 4. Convert any uint64 tick to bytes in little-endian format.
	// 5. Concatentate the the bytes of the tick to the leader_seed and use the array as a seed to a SHA1PRNG generator.
	// 6. Generate a random double r between [0, 1) and seek the first validator in `bonds` where the total cumulative weight exceeds r * total.
	LeaderSeed []byte `protobuf:"bytes,6,opt,name=leader_seed,json=leaderSeed,proto3" json:"leader_seed,omitempty"`
	// Bonded validator weights from the booking block.
	Bonds                []*Bond  `protobuf:"bytes,7,rep,name=bonds,proto3" json:"bonds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Era) Reset()         { *m = Era{} }
func (m *Era) String() string { return proto.CompactTextString(m) }
func (*Era) ProtoMessage()    {}
func (*Era) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef60ffad3b483db, []int{8}
}
func (m *Era) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Era.Unmarshal(m, b)
}
func (m *Era) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Era.Marshal(b, m, deterministic)
}
func (m *Era) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Era.Merge(m, src)
}
func (m *Era) XXX_Size() int {
	return xxx_messageInfo_Era.Size(m)
}
func (m *Era) XXX_DiscardUnknown() {
	xxx_messageInfo_Era.DiscardUnknown(m)
}

var xxx_messageInfo_Era proto.InternalMessageInfo

func (m *Era) GetKeyBlockHash() []byte {
	if m != nil {
		return m.KeyBlockHash
	}
	return nil
}

func (m *Era) GetParentKeyBlockHash() []byte {
	if m != nil {
		return m.ParentKeyBlockHash
	}
	return nil
}

func (m *Era) GetStartTick() uint64 {
	if m != nil {
		return m.StartTick
	}
	return 0
}

func (m *Era) GetEndTick() uint64 {
	if m != nil {
		return m.EndTick
	}
	return 0
}

func (m *Era) GetBookingBlockHash() []byte {
	if m != nil {
		return m.BookingBlockHash
	}
	return nil
}

func (m *Era) GetLeaderSeed() []byte {
	if m != nil {
		return m.LeaderSeed
	}
	return nil
}

func (m *Era) GetBonds() []*Bond {
	if m != nil {
		return m.Bonds
	}
	return nil
}

func init() {
	proto.RegisterEnum("io.casperlabs.casper.consensus.Block_MessageType", Block_MessageType_name, Block_MessageType_value)
	proto.RegisterEnum("io.casperlabs.casper.consensus.Block_MessageRole", Block_MessageRole_name, Block_MessageRole_value)
	proto.RegisterType((*Signature)(nil), "io.casperlabs.casper.consensus.Signature")
	proto.RegisterType((*Approval)(nil), "io.casperlabs.casper.consensus.Approval")
	proto.RegisterType((*Deploy)(nil), "io.casperlabs.casper.consensus.Deploy")
	proto.RegisterType((*Deploy_Header)(nil), "io.casperlabs.casper.consensus.Deploy.Header")
	proto.RegisterType((*Deploy_Body)(nil), "io.casperlabs.casper.consensus.Deploy.Body")
	proto.RegisterType((*Deploy_Code)(nil), "io.casperlabs.casper.consensus.Deploy.Code")
	proto.RegisterType((*Deploy_Code_WasmContract)(nil), "io.casperlabs.casper.consensus.Deploy.Code.WasmContract")
	proto.RegisterType((*Deploy_Code_StoredVersionedContract)(nil), "io.casperlabs.casper.consensus.Deploy.Code.StoredVersionedContract")
	proto.RegisterType((*Deploy_Code_StoredContract)(nil), "io.casperlabs.casper.consensus.Deploy.Code.StoredContract")
	proto.RegisterType((*Deploy_Code_TransferContract)(nil), "io.casperlabs.casper.consensus.Deploy.Code.TransferContract")
	proto.RegisterType((*Deploy_Arg)(nil), "io.casperlabs.casper.consensus.Deploy.Arg")
	proto.RegisterType((*Deploy_LegacyArg)(nil), "io.casperlabs.casper.consensus.Deploy.LegacyArg")
	proto.RegisterType((*Deploy_LegacyArg_Value)(nil), "io.casperlabs.casper.consensus.Deploy.LegacyArg.Value")
	proto.RegisterType((*DeploySummary)(nil), "io.casperlabs.casper.consensus.DeploySummary")
	proto.RegisterType((*BlockSummary)(nil), "io.casperlabs.casper.consensus.BlockSummary")
	proto.RegisterType((*Block)(nil), "io.casperlabs.casper.consensus.Block")
	proto.RegisterType((*Block_Header)(nil), "io.casperlabs.casper.consensus.Block.Header")
	proto.RegisterType((*Block_Body)(nil), "io.casperlabs.casper.consensus.Block.Body")
	proto.RegisterType((*Block_Justification)(nil), "io.casperlabs.casper.consensus.Block.Justification")
	proto.RegisterType((*Block_ProcessedDeploy)(nil), "io.casperlabs.casper.consensus.Block.ProcessedDeploy")
	proto.RegisterType((*Block_GlobalState)(nil), "io.casperlabs.casper.consensus.Block.GlobalState")
	proto.RegisterType((*Bond)(nil), "io.casperlabs.casper.consensus.Bond")
	proto.RegisterType((*GenesisCandidate)(nil), "io.casperlabs.casper.consensus.GenesisCandidate")
	proto.RegisterType((*Era)(nil), "io.casperlabs.casper.consensus.Era")
}

func init() {
	proto.RegisterFile("io/casperlabs/casper/consensus/consensus.proto", fileDescriptor_1ef60ffad3b483db)
}

var fileDescriptor_1ef60ffad3b483db = []byte{
	// 1888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdf, 0x6e, 0x1b, 0xb9,
	0xf5, 0xf6, 0x58, 0xff, 0x8f, 0x46, 0xb6, 0xcc, 0xf5, 0xfe, 0xa2, 0xe8, 0xd7, 0x34, 0x5e, 0x25,
	0x5d, 0xb8, 0xe9, 0x5a, 0xce, 0xee, 0x22, 0x45, 0xbb, 0x68, 0x53, 0x58, 0x8e, 0x63, 0x3b, 0x71,
	0x6c, 0x83, 0xf2, 0x6e, 0x80, 0xf6, 0x62, 0x4a, 0xcd, 0x30, 0x63, 0x46, 0xa3, 0x99, 0xd9, 0x21,
	0xe5, 0x85, 0x2e, 0x8b, 0x5e, 0xf6, 0xae, 0x28, 0x50, 0xa0, 0x97, 0xed, 0x63, 0xb4, 0x40, 0x9f,
	0xa2, 0x57, 0x7d, 0x80, 0x3e, 0x40, 0x1f, 0xa0, 0x05, 0x0f, 0x67, 0xa4, 0x91, 0x9a, 0x8d, 0xe5,
	0x04, 0xd8, 0x9b, 0x01, 0xf9, 0x91, 0xe7, 0x7c, 0xe4, 0xe1, 0x21, 0xf9, 0x71, 0xa0, 0x2b, 0xa2,
	0x5d, 0x97, 0xc9, 0x98, 0x27, 0x01, 0x1b, 0xc8, 0xb4, 0xb8, 0xeb, 0x46, 0xa1, 0xe4, 0xa1, 0x1c,
	0xcb, 0x59, 0xa9, 0x1b, 0x27, 0x91, 0x8a, 0xc8, 0xf7, 0x45, 0xd4, 0x9d, 0xf5, 0x4f, 0x8b, 0xdd,
	0x69, 0xaf, 0xf6, 0xc3, 0x6b, 0xfc, 0x49, 0xc5, 0x14, 0x37, 0x5f, 0xe3, 0xb1, 0xd3, 0x83, 0x5a,
	0x5f, 0xf8, 0x21, 0x53, 0xe3, 0x84, 0x93, 0x7b, 0xd0, 0x90, 0xc2, 0x77, 0x58, 0xe0, 0x47, 0x89,
	0x50, 0x97, 0xa3, 0x96, 0xb5, 0x65, 0x6d, 0xd7, 0xa8, 0x2d, 0x85, 0xbf, 0x97, 0x61, 0xa4, 0x09,
	0x05, 0x29, 0xfc, 0xd6, 0xea, 0x96, 0xb5, 0x6d, 0x53, 0x5d, 0xec, 0xfc, 0xd6, 0x82, 0xea, 0x5e,
	0x1c, 0x27, 0xd1, 0x15, 0x0b, 0x48, 0x17, 0x3e, 0x60, 0x58, 0xe6, 0x89, 0x13, 0x8f, 0x07, 0x81,
	0x70, 0x9d, 0x21, 0x9f, 0xa0, 0x27, 0x9b, 0x6e, 0x64, 0x4d, 0xe7, 0xd8, 0xf2, 0x9c, 0x4f, 0xc8,
	0x21, 0xd4, 0x64, 0x36, 0x00, 0x74, 0x5a, 0xff, 0xec, 0x87, 0xdd, 0xb7, 0x4f, 0xb3, 0x3b, 0x1d,
	0x31, 0x9d, 0xd9, 0x76, 0xfe, 0xbd, 0x01, 0xe5, 0x27, 0x3c, 0x0e, 0xa2, 0x09, 0xb9, 0x0b, 0x75,
	0x0f, 0x4b, 0xce, 0x25, 0x93, 0x97, 0x29, 0x37, 0x18, 0xe8, 0x88, 0xc9, 0x4b, 0x72, 0x00, 0xe5,
	0x4b, 0xce, 0x3c, 0x9e, 0xa4, 0x8c, 0x3b, 0xd7, 0x31, 0x1a, 0xc7, 0xdd, 0x23, 0x34, 0xa2, 0xa9,
	0x31, 0xf9, 0x05, 0x14, 0x07, 0x91, 0x37, 0x69, 0x15, 0xd0, 0xc9, 0x8f, 0x96, 0x74, 0xd2, 0x8b,
	0xbc, 0x09, 0x45, 0x43, 0xf2, 0x14, 0x6a, 0x2c, 0x0d, 0x9c, 0x6c, 0x15, 0xb7, 0x0a, 0xdb, 0xf5,
	0xcf, 0xb6, 0xaf, 0xf3, 0x92, 0x45, 0x9a, 0xce, 0x4c, 0xdb, 0xff, 0xb1, 0xa0, 0x6c, 0xc6, 0x46,
	0x1e, 0xc1, 0x2d, 0xe6, 0xba, 0xd1, 0x38, 0x54, 0xb9, 0xf0, 0xe7, 0xe3, 0xb0, 0x99, 0x36, 0x4f,
	0x97, 0x00, 0x23, 0xf2, 0x3d, 0xa8, 0x29, 0x31, 0xe2, 0x52, 0xb1, 0x51, 0x8c, 0xf3, 0x29, 0xd2,
	0x19, 0x40, 0xfe, 0x1f, 0x6a, 0x3e, 0x93, 0x4e, 0x9c, 0x08, 0x97, 0xb7, 0x8a, 0xd8, 0x5a, 0xf5,
	0x99, 0x3c, 0xd7, 0x75, 0xdd, 0xa8, 0x27, 0x63, 0x38, 0x4a, 0xc8, 0x51, 0xd5, 0x00, 0xfa, 0xbd,
	0x03, 0xa0, 0x54, 0xe0, 0x8c, 0x44, 0x10, 0x08, 0xd9, 0x2a, 0x6f, 0x59, 0xdb, 0x0d, 0x5a, 0x53,
	0x2a, 0x78, 0x81, 0x00, 0xe9, 0x80, 0xed, 0xf1, 0x98, 0x87, 0x1e, 0x0f, 0x5d, 0xc1, 0x65, 0xab,
	0xb2, 0x55, 0xd8, 0xb6, 0xe9, 0x1c, 0xa6, 0x5d, 0xb8, 0x97, 0x4c, 0x84, 0x4e, 0xc8, 0x46, 0xbc,
	0x55, 0xc5, 0x94, 0xac, 0x21, 0x72, 0xca, 0x46, 0xfc, 0x59, 0xb1, 0xba, 0xda, 0x2c, 0xb4, 0xff,
	0x60, 0x41, 0x51, 0x07, 0x96, 0x1c, 0x40, 0x45, 0x72, 0x29, 0x45, 0x14, 0xe2, 0x7c, 0x97, 0x5f,
	0x96, 0xfd, 0xc8, 0xe3, 0x34, 0xb3, 0xd5, 0x6e, 0x62, 0x36, 0x19, 0xf1, 0x50, 0xa5, 0x29, 0x72,
	0x33, 0x37, 0xa9, 0x6d, 0xfb, 0x9f, 0x65, 0x28, 0x6a, 0x84, 0x3c, 0x86, 0x22, 0x4b, 0x7c, 0xd9,
	0xb2, 0x70, 0x91, 0x1f, 0x2c, 0xe9, 0x6c, 0x2f, 0xf1, 0x29, 0xda, 0x11, 0x07, 0x1a, 0xdf, 0x30,
	0x39, 0x72, 0xdc, 0x28, 0x54, 0x09, 0x73, 0xb3, 0x51, 0xfd, 0xe4, 0x06, 0xa3, 0xea, 0xbe, 0x64,
	0x72, 0xb4, 0x9f, 0xda, 0x1f, 0xad, 0x50, 0xfb, 0x9b, 0x5c, 0x9d, 0x70, 0x58, 0x97, 0x2a, 0x4a,
	0xb8, 0x37, 0xa3, 0x30, 0x69, 0xfd, 0xc5, 0x4d, 0x28, 0xfa, 0xe8, 0x22, 0x47, 0xb2, 0x26, 0xe7,
	0x10, 0xf2, 0x1b, 0x0b, 0x6e, 0xa7, 0x3c, 0x57, 0x3c, 0xd1, 0xa1, 0xce, 0x33, 0x16, 0x91, 0x71,
	0xff, 0xe6, 0x8c, 0x5f, 0x65, 0xbe, 0x72, 0xd4, 0xb7, 0xe4, 0x9b, 0x9b, 0xc8, 0x10, 0x36, 0x54,
	0xc2, 0x42, 0xf9, 0x8a, 0x27, 0x33, 0xea, 0x12, 0x52, 0xff, 0xec, 0x26, 0xd4, 0x17, 0xa9, 0x93,
	0x1c, 0x67, 0x53, 0x2d, 0x60, 0xed, 0x0e, 0xd8, 0xf9, 0xb8, 0x13, 0x02, 0x45, 0x1d, 0xf7, 0x74,
	0x33, 0x62, 0xb9, 0xfd, 0x27, 0x0b, 0x6e, 0x7d, 0xcb, 0x3c, 0xc8, 0x3d, 0xb0, 0x63, 0xe6, 0x0e,
	0x99, 0xcf, 0x73, 0x9b, 0xf8, 0x68, 0x85, 0xd6, 0x53, 0x14, 0x77, 0xd9, 0x26, 0x14, 0x71, 0x73,
	0xe8, 0xa4, 0xa8, 0x1d, 0xad, 0x50, 0xac, 0xe9, 0x63, 0x90, 0x87, 0x2a, 0x99, 0x38, 0x71, 0x24,
	0x42, 0xb3, 0x9c, 0x35, 0x0a, 0x08, 0x9d, 0x6b, 0x84, 0xb4, 0xa0, 0x92, 0x2e, 0x02, 0x46, 0xbe,
	0x41, 0xb3, 0x6a, 0xaf, 0x06, 0x15, 0xe6, 0x79, 0x09, 0x97, 0xb2, 0x3d, 0x81, 0xb5, 0xf9, 0x55,
	0x25, 0x3f, 0x80, 0x46, 0x16, 0xb6, 0xf9, 0x31, 0xd9, 0x19, 0xfc, 0x1e, 0x83, 0xca, 0x53, 0x13,
	0x68, 0x2e, 0xc6, 0xb8, 0x07, 0x50, 0xcd, 0x58, 0xda, 0x01, 0x14, 0xf6, 0x12, 0x5f, 0x87, 0x14,
	0x89, 0xcc, 0x6d, 0x65, 0x68, 0x9e, 0x43, 0xe9, 0x8a, 0x05, 0x63, 0x9e, 0x26, 0xf1, 0xa3, 0xeb,
	0xd6, 0xd5, 0xdc, 0x89, 0xfb, 0x27, 0x5f, 0x69, 0xa3, 0xe3, 0x50, 0x2a, 0x16, 0xba, 0x9c, 0x1a,
	0x1f, 0xe9, 0x11, 0xf3, 0xfb, 0x12, 0xd4, 0x4e, 0xb8, 0xcf, 0xdc, 0xc9, 0xb7, 0x91, 0x9e, 0x64,
	0xa4, 0x66, 0x73, 0xfe, 0x78, 0xc9, 0x64, 0x9a, 0x3a, 0xed, 0x22, 0x7b, 0xca, 0xda, 0xfe, 0x73,
	0x11, 0x4a, 0x08, 0x10, 0x07, 0xd6, 0xa2, 0x58, 0x89, 0x28, 0x64, 0x81, 0x63, 0x08, 0xac, 0xf7,
	0x21, 0x38, 0x5a, 0xa1, 0x8d, 0xcc, 0x9f, 0x21, 0xf8, 0x08, 0xea, 0x83, 0x89, 0xe2, 0xd2, 0x99,
	0x0d, 0x5f, 0xaf, 0x27, 0x20, 0x68, 0xba, 0xdc, 0x81, 0x9a, 0x08, 0x95, 0x33, 0x0b, 0x6a, 0xe9,
	0x68, 0x85, 0x56, 0x45, 0xa8, 0x4c, 0xf3, 0x33, 0xd0, 0x65, 0x27, 0x10, 0x32, 0xdb, 0xc5, 0x3b,
	0xcb, 0x85, 0xfc, 0x38, 0x54, 0x27, 0x42, 0xea, 0xbd, 0x53, 0x11, 0xa6, 0xa8, 0x53, 0x5e, 0xaa,
	0x44, 0x84, 0x7e, 0xca, 0x56, 0x4a, 0x13, 0xa8, 0x6e, 0x50, 0x43, 0xd8, 0x87, 0xb4, 0x6a, 0x38,
	0xcb, 0xc8, 0xf9, 0x70, 0x39, 0xce, 0x3e, 0x1a, 0xa6, 0xb4, 0x20, 0xa7, 0x35, 0x72, 0x17, 0x20,
	0x88, 0xa6, 0xbc, 0x95, 0x2d, 0x6b, 0xbb, 0x70, 0xb4, 0x42, 0x6b, 0x1a, 0x33, 0xac, 0x87, 0x50,
	0x19, 0x08, 0xdf, 0xd1, 0x99, 0x5b, 0x45, 0xc6, 0x4f, 0x96, 0x63, 0xec, 0x09, 0xff, 0x38, 0xd4,
	0x6c, 0xe5, 0x01, 0x96, 0xc8, 0xcf, 0xa1, 0xa0, 0x65, 0x51, 0x6d, 0x39, 0xc1, 0x63, 0x9c, 0xe8,
	0xbb, 0x7a, 0x85, 0x6a, 0xbb, 0x5e, 0x25, 0xcd, 0xb4, 0xce, 0xdf, 0x2d, 0x68, 0x98, 0x55, 0xee,
	0x8f, 0x47, 0x23, 0x96, 0x7c, 0x77, 0xe2, 0x67, 0x4e, 0xbb, 0x14, 0xde, 0x59, 0xbb, 0x74, 0xfe,
	0x66, 0x81, 0xdd, 0x0b, 0x22, 0x77, 0x98, 0x4d, 0xe0, 0x0e, 0xc0, 0x40, 0xd7, 0xf3, 0xe3, 0xaf,
	0x21, 0x82, 0xc3, 0x7f, 0xb2, 0x30, 0xfc, 0x6b, 0x57, 0x00, 0x9d, 0x2f, 0x8e, 0x7e, 0x4e, 0x76,
	0x16, 0xde, 0x43, 0x76, 0xfe, 0x6b, 0x0d, 0x4a, 0xc8, 0xf0, 0xdd, 0x8c, 0xfb, 0xf1, 0x9c, 0xe4,
	0x7c, 0xb0, 0x9c, 0x8f, 0x9c, 0xe2, 0x9c, 0x9b, 0x77, 0xf1, 0xdd, 0xe7, 0xdd, 0xfe, 0x47, 0x65,
	0x2a, 0x39, 0xef, 0x41, 0x23, 0x66, 0x09, 0x0f, 0xcd, 0x6d, 0xc0, 0x8d, 0xc8, 0xb1, 0xa9, 0x6d,
	0xc0, 0x23, 0xc4, 0xc8, 0xaf, 0x60, 0xed, 0xf5, 0x58, 0x2a, 0xf1, 0x4a, 0xb8, 0x4c, 0x1f, 0x3d,
	0xb2, 0xb5, 0x8a, 0x39, 0xf3, 0xf9, 0x72, 0x53, 0x78, 0x96, 0xb7, 0xa5, 0x0b, 0xae, 0xc8, 0x21,
	0x94, 0x70, 0x8b, 0xa4, 0x61, 0xf9, 0x74, 0x39, 0x9f, 0x87, 0x41, 0x34, 0x60, 0x41, 0x5f, 0x1b,
	0x52, 0x63, 0x3f, 0xaf, 0x65, 0x8b, 0x0b, 0x5a, 0x76, 0x4e, 0x23, 0x97, 0x16, 0x35, 0xf2, 0xaf,
	0xa1, 0x89, 0x4f, 0x2a, 0x37, 0x0a, 0x32, 0x69, 0xd3, 0x6a, 0xdc, 0xe4, 0xf2, 0x39, 0x4f, 0xad,
	0x53, 0x0d, 0x40, 0xd7, 0xe3, 0x79, 0x80, 0x7c, 0x84, 0x62, 0x59, 0xef, 0x6c, 0x14, 0xf0, 0x78,
	0x3e, 0x35, 0x68, 0xba, 0xdb, 0xf7, 0x35, 0x74, 0x8d, 0x56, 0xd6, 0x8f, 0x83, 0x2b, 0x16, 0x08,
	0x8f, 0xa9, 0x28, 0x71, 0x4c, 0xb2, 0x4a, 0xfe, 0xb5, 0x13, 0x8e, 0x47, 0x78, 0x12, 0x35, 0xe8,
	0xe6, 0xb4, 0xd9, 0x6c, 0x49, 0xfe, 0xf5, 0xe9, 0x78, 0x44, 0x1e, 0xc2, 0x0c, 0xcf, 0x3f, 0xea,
	0x00, 0x03, 0x44, 0xa6, 0x6d, 0xb3, 0x57, 0xdd, 0x4f, 0xe1, 0xf6, 0x9b, 0x2c, 0x4c, 0x5c, 0x37,
	0xd1, 0xec, 0xff, 0xfe, 0xd7, 0x0c, 0xa3, 0x3c, 0x6f, 0x9a, 0xf0, 0x2b, 0x27, 0xb7, 0xab, 0xd6,
	0x16, 0x4d, 0x13, 0x7e, 0xd5, 0x9b, 0x6e, 0xb1, 0x0f, 0xa1, 0xfc, 0xda, 0x49, 0x58, 0x38, 0x6c,
	0xd5, 0x71, 0x75, 0x4a, 0xaf, 0x29, 0x0b, 0x87, 0xe4, 0x02, 0xec, 0x11, 0x97, 0x52, 0x4b, 0x28,
	0x35, 0x89, 0x79, 0xcb, 0xde, 0xb2, 0xb6, 0xd7, 0x96, 0x4d, 0x92, 0x17, 0xc6, 0xf2, 0x62, 0x12,
	0x73, 0x5a, 0x1f, 0xcd, 0x2a, 0x79, 0xaf, 0x49, 0x14, 0xf0, 0xd6, 0x07, 0xef, 0xe0, 0x95, 0x46,
	0xc1, 0xcc, 0xab, 0xae, 0x90, 0xfb, 0xb0, 0xa6, 0xe3, 0x94, 0x9b, 0xf2, 0x3a, 0x4e, 0xd9, 0xd6,
	0xa7, 0xfe, 0x74, 0xa2, 0xb7, 0xa1, 0x9a, 0x44, 0xe3, 0xd0, 0x73, 0x84, 0xd7, 0x6a, 0xe2, 0x54,
	0x2b, 0x58, 0x3f, 0xf6, 0x74, 0x06, 0x8f, 0x98, 0x2f, 0x5c, 0x67, 0x20, 0x54, 0x6b, 0x63, 0xcb,
	0xda, 0xae, 0xd2, 0x2a, 0x02, 0x3d, 0xa1, 0x4c, 0xa3, 0x08, 0x4d, 0x8c, 0x88, 0x79, 0xc7, 0x69,
	0x40, 0x87, 0xe9, 0x59, 0xb1, 0x5a, 0x6e, 0x56, 0xda, 0x2f, 0xd3, 0x77, 0xd4, 0x19, 0x54, 0x4c,
	0x62, 0x65, 0x6f, 0x96, 0x47, 0xcb, 0xcd, 0xec, 0x3c, 0x89, 0x5c, 0x2e, 0x25, 0xf7, 0xcc, 0xad,
	0x41, 0x33, 0x2f, 0xed, 0x2b, 0x68, 0xcc, 0x6d, 0xe2, 0xb7, 0xe7, 0x88, 0xf5, 0xd6, 0x1c, 0x79,
	0x00, 0x1b, 0x01, 0x53, 0x5c, 0xaa, 0x7c, 0xa0, 0xcc, 0x1f, 0x89, 0x75, 0xd3, 0x30, 0x8d, 0x55,
	0xfb, 0xaf, 0x16, 0xac, 0x2f, 0x0c, 0x8a, 0x3c, 0x86, 0xb2, 0x19, 0x56, 0x2a, 0xa4, 0x3e, 0x5e,
	0xee, 0x0a, 0xa4, 0xa9, 0x95, 0x16, 0x7f, 0x6e, 0x24, 0xcd, 0x23, 0xac, 0x48, 0xb1, 0xac, 0xd7,
	0x44, 0x48, 0x87, 0x27, 0x49, 0x94, 0xe0, 0x31, 0x54, 0xa5, 0x15, 0x21, 0x0f, 0x74, 0x55, 0x1f,
	0x90, 0x88, 0x3b, 0xe9, 0x4a, 0xe3, 0xc9, 0x52, 0xa3, 0x36, 0x82, 0x69, 0x2a, 0x90, 0x4d, 0x3c,
	0xc3, 0x7c, 0x23, 0x77, 0x1a, 0xd4, 0x54, 0xda, 0x7f, 0xb4, 0xa0, 0x9e, 0x3b, 0xa7, 0x74, 0x7e,
	0xc4, 0x09, 0x77, 0xf0, 0xc4, 0xc8, 0x47, 0xca, 0x8e, 0x13, 0x8e, 0x3d, 0x30, 0x3e, 0x1f, 0xc3,
	0x7a, 0x1c, 0x49, 0x95, 0xef, 0x66, 0xa2, 0xd3, 0xd0, 0xf0, 0xac, 0xdf, 0x17, 0x50, 0x1a, 0x44,
	0xa1, 0x97, 0xdd, 0xdf, 0xf7, 0xaf, 0x5d, 0xe2, 0x28, 0xf4, 0xa8, 0x31, 0xe9, 0xdc, 0x87, 0x7a,
	0x6e, 0x6f, 0x90, 0x1a, 0x94, 0x7a, 0x27, 0x67, 0xfb, 0xcf, 0x9b, 0x2b, 0x04, 0xa0, 0xdc, 0xdb,
	0x3b, 0x39, 0x39, 0xbb, 0x68, 0x5a, 0x9d, 0xe3, 0x69, 0x2f, 0x4c, 0xef, 0x06, 0xd4, 0xbe, 0x3c,
	0x7d, 0x72, 0xf0, 0xf4, 0xf8, 0xf4, 0xe0, 0x49, 0x73, 0x85, 0xd8, 0x50, 0x3d, 0xa7, 0x67, 0xe7,
	0x67, 0xfd, 0xbd, 0x93, 0xa6, 0x45, 0x9a, 0x60, 0xef, 0x9f, 0x9d, 0x3e, 0x3d, 0xa6, 0x2f, 0xf6,
	0x2e, 0x8e, 0xcf, 0x4e, 0x9b, 0xab, 0xa4, 0x0e, 0x95, 0x97, 0xc7, 0x17, 0xa7, 0x07, 0xfd, 0x7e,
	0xb3, 0xd0, 0xf9, 0x1d, 0x3e, 0xf1, 0x43, 0xef, 0x7d, 0x12, 0xa7, 0x87, 0x41, 0x1e, 0x66, 0x17,
	0xc5, 0x8d, 0xd4, 0x1b, 0x35, 0xa6, 0xe6, 0x35, 0xd0, 0x99, 0x40, 0xf3, 0x90, 0x87, 0x5c, 0x0a,
	0xb9, 0xcf, 0x42, 0x4f, 0x73, 0xf1, 0xeb, 0x14, 0xc0, 0x9c, 0x62, 0x5a, 0x7d, 0x77, 0xc5, 0xf4,
	0x97, 0x55, 0x28, 0x1c, 0x24, 0xec, 0x0d, 0x67, 0x85, 0xf5, 0x86, 0xb3, 0xe2, 0x53, 0xf8, 0x30,
	0xbd, 0x9d, 0x17, 0x3a, 0x9b, 0x8c, 0x20, 0xa6, 0xf1, 0x79, 0xde, 0xe4, 0x0e, 0x80, 0x54, 0x2c,
	0x51, 0x8e, 0x12, 0xee, 0x30, 0xfb, 0x1b, 0x84, 0xc8, 0x85, 0x70, 0x87, 0x3a, 0xd3, 0x79, 0xe8,
	0x99, 0x46, 0xf3, 0x33, 0xa8, 0xc2, 0x43, 0x0f, 0x9b, 0x3e, 0x01, 0x32, 0x88, 0xa2, 0xa1, 0x96,
	0xe5, 0x39, 0x26, 0xf3, 0x53, 0xa8, 0x99, 0xb6, 0xcc, 0x78, 0xee, 0x42, 0x3d, 0x40, 0x09, 0xe1,
	0x48, 0xce, 0x3d, 0xd4, 0xf0, 0x36, 0x05, 0x03, 0xf5, 0x39, 0xf7, 0x66, 0xf9, 0x59, 0xb9, 0x71,
	0x7e, 0xf6, 0x5e, 0xfe, 0xf2, 0x4b, 0x5f, 0xa8, 0xcb, 0xf1, 0xa0, 0xeb, 0x46, 0xa3, 0xdd, 0x4b,
	0x8f, 0xb9, 0x3b, 0x73, 0x7f, 0x47, 0x77, 0x38, 0xdf, 0xf1, 0x93, 0xd8, 0xdd, 0xf1, 0xa3, 0x9d,
	0xb1, 0x12, 0xc1, 0x2e, 0x5e, 0xb7, 0x83, 0xf1, 0xab, 0xdd, 0xb7, 0xff, 0x44, 0x1d, 0x94, 0xb1,
	0xe3, 0xe7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x07, 0x5a, 0x0f, 0xb7, 0xbd, 0x15, 0x00, 0x00,
}
