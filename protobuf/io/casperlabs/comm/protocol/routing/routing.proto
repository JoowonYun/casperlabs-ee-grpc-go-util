syntax = "proto3";
package io.casperlabs.comm.protocol.routing;

import "io/casperlabs/comm/discovery/node.proto";

message Header {
  io.casperlabs.comm.discovery.Node sender = 1;
}

message Heartbeat {
}

message HeartbeatResponse {
}

message ProtocolHandshake {
  bytes nonce       = 1;
}

message ProtocolHandshakeResponse {
  bytes nonce       = 1;
}

message Packet {
  string typeId  = 1;
  bytes  content = 2;
}

message Disconnect {
}

message Protocol {
    Header header                                                 = 1;
    oneof message {
        Heartbeat                   heartbeat                     = 2;
        HeartbeatResponse           heartbeat_response            = 3;
        ProtocolHandshake           protocol_handshake            = 4;
        ProtocolHandshakeResponse   protocol_handshake_response   = 5;
        Packet                      packet                        = 6;
        Disconnect                  disconnect                    = 7;
    }
}

service TransportLayer {
  rpc Tell (TLRequest) returns (TLResponse) {}
  rpc Ask (TLRequest) returns (TLResponse) {}
  // this eventually will become streamed API, for now regular call
  rpc Stream (stream Chunk) returns (ChunkResponse) {}
}

message TLRequest {
  Protocol protocol = 1;
}

message InternalServerError {
  bytes error = 1;
}

message NoResponse {
}

message TLResponse {
  oneof payload {
    Protocol protocol                       = 1;
    NoResponse noResponse                   = 2;
    InternalServerError internalServerError = 3;
  }
}

message ChunkHeader {
  io.casperlabs.comm.discovery.Node sender = 1;
  string typeId                            = 2;
  bool   compressed                        = 3;
  int32  contentLength                     = 4;
}

message ChunkData {
  bytes contentData = 1;
}

message Chunk {
  oneof content {
    ChunkHeader header = 1;
    ChunkData   data   = 2;
  }
}

message ChunkResponse {

}
